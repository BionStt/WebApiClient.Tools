@inherits HtmlTemplateBase<HttpApi>

@using WebApiClient.Tools.Swagger
@using RazorEngine.Templating
@using NSwag

<usings>
    <div>using System;</div>
    <div>using System.Collections.Generic;</div>
    <div>using System.ComponentModel.DataAnnotations;</div>

    <div>using System.Net.Http;</div>
    <div>using System.Threading;</div>
    <div>using System.Threading.Tasks;</div>

    <div>using WebApiClient;</div>
    <div>using WebApiClient.Attributes;</div>
    <div>using WebApiClient.DataAnnotations;</div>
    <div>using WebApiClient.Parameterables;</div>
</usings>

<namespace>
    <div>namespace @(Model.AspNetNamespace)</div>
    <div>{</div>
    <interface>
        <div>[TraceFilter]</div>
        @if (string.IsNullOrEmpty(Model.BaseUrl) == false)
        {
            <div>[HttpHost("@(Model.BaseUrl.TrimEnd('/'))/]</div>
        }
        <div>public interface @(Model.Interface) : IHttpApi</div>
        <div>{</div>
        @foreach (var operation in Model.Operations)
        {
            var isMultipart = operation.Consumes.Contains("multipart/form-data");
            <summary>
                @if (operation.HasSummary == true)
                {
                    <div>/// &lt;summary&gt;</div>
                    foreach (var line in operation.Summary.Split(new[] { "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries))
                    {
                        <div>/// @line</div>
                    }
                    <div>/// &lt;/summary&gt;</div>
                }

                @foreach (var parameter in operation.Parameters)
                {
                    var description = parameter.HasDescription ? parameter.Description.Replace("\r", "\t").Replace("\n", "\t") : null;
                    <div>/// &lt;param name="@(parameter.VariableName)"&gt;@(description)&lt;/param&gt;</div>
                }
                @if (operation.HasResultDescription == true)
                {
                    <div>/// &lt;returns&gt;@(operation.ResultDescription)&lt;/returns&gt;</div>
                }
            </summary>

            if (operation.IsDeprecated == true)
            {
                <div>[Obsolete]</div>
            }
            <div>[Http@(operation.HttpMethodUpper)("@(operation.Path)")]</div>
            <div>
                <span>@(operation.ResultType)</span>
                <span>@(operation.ActualOperationName)Async(</span>
                <parameters>
                    @foreach (var parameter in operation.Parameters)
                    {
                        if (parameter.IsRequired == true)
                        {
                            <span>[Required]</span>
                        }

                        if (parameter.Kind == SwaggerParameterKind.Header)
                        {
                            <span>[Header("@(parameter.Name)")]</span>
                        }
                        else if (parameter.IsXmlBodyParameter == true)
                        {
                            <span>[XmlContent]</span>
                        }
                        else if (parameter.Kind == SwaggerParameterKind.Body)
                        {
                            <span>[JsonContent]</span>
                        }
                        else if (parameter.Kind == SwaggerParameterKind.FormData)
                        {
                            if (parameter.IsFile == false)
                            {
                                if (isMultipart == true)
                                {
                                    <span>[MulitpartContent]</span>
                                }
                                else
                                {
                                    <span>[FormContent]</span>
                                }
                            }
                        }

                        <span>@(parameter.TypeInControllerInterface)</span>
                        <span>@(parameter.VariableName)@(parameter.IsLast ? null : ",") </span>
                    }
                </parameters>
                <span>);</span>
            </div>
        }
        <div>}</div>
    </interface>
    <div>}</div>
</namespace>